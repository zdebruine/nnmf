// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/nnmf.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_als_nnmf_dense
Rcpp::List cpp_als_nnmf_dense(Eigen::MatrixXf V, int k, uint64_t inv_test_size, uint64_t test_seed, Eigen::MatrixXf W, float tol, size_t epochs, bool verbose, Rcpp::NumericVector L1, Rcpp::NumericVector L2, Rcpp::NumericVector ortho, bool log_total_loss, bool log_ortho_loss, bool log_test_loss, bool log_sparsity, int num_threads);
RcppExport SEXP _nnmf_cpp_als_nnmf_dense(SEXP VSEXP, SEXP kSEXP, SEXP inv_test_sizeSEXP, SEXP test_seedSEXP, SEXP WSEXP, SEXP tolSEXP, SEXP epochsSEXP, SEXP verboseSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP orthoSEXP, SEXP log_total_lossSEXP, SEXP log_ortho_lossSEXP, SEXP log_test_lossSEXP, SEXP log_sparsitySEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type inv_test_size(inv_test_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type test_seed(test_seedSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type W(WSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ortho(orthoSEXP);
    Rcpp::traits::input_parameter< bool >::type log_total_loss(log_total_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_ortho_loss(log_ortho_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_test_loss(log_test_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_sparsity(log_sparsitySEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_als_nnmf_dense(V, k, inv_test_size, test_seed, W, tol, epochs, verbose, L1, L2, ortho, log_total_loss, log_ortho_loss, log_test_loss, log_sparsity, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// cpp_als_nnmf_sparse
Rcpp::List cpp_als_nnmf_sparse(Eigen::SparseMatrix<float> V, int k, uint64_t inv_test_size, uint64_t test_seed, Eigen::MatrixXf W, float tol, size_t epochs, bool verbose, Rcpp::NumericVector L1, Rcpp::NumericVector L2, Rcpp::NumericVector ortho, bool log_total_loss, bool log_ortho_loss, bool log_test_loss, bool log_sparsity, int num_threads);
RcppExport SEXP _nnmf_cpp_als_nnmf_sparse(SEXP VSEXP, SEXP kSEXP, SEXP inv_test_sizeSEXP, SEXP test_seedSEXP, SEXP WSEXP, SEXP tolSEXP, SEXP epochsSEXP, SEXP verboseSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP orthoSEXP, SEXP log_total_lossSEXP, SEXP log_ortho_lossSEXP, SEXP log_test_lossSEXP, SEXP log_sparsitySEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<float> >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type inv_test_size(inv_test_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type test_seed(test_seedSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type W(WSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ortho(orthoSEXP);
    Rcpp::traits::input_parameter< bool >::type log_total_loss(log_total_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_ortho_loss(log_ortho_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_test_loss(log_test_lossSEXP);
    Rcpp::traits::input_parameter< bool >::type log_sparsity(log_sparsitySEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_als_nnmf_sparse(V, k, inv_test_size, test_seed, W, tol, epochs, verbose, L1, L2, ortho, log_total_loss, log_ortho_loss, log_test_loss, log_sparsity, num_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nnmf_cpp_als_nnmf_dense", (DL_FUNC) &_nnmf_cpp_als_nnmf_dense, 16},
    {"_nnmf_cpp_als_nnmf_sparse", (DL_FUNC) &_nnmf_cpp_als_nnmf_sparse, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_nnmf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
